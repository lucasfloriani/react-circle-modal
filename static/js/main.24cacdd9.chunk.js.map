{"version":3,"sources":["../../src/style.tsx","../../src/index.tsx","../../src/hooks/useModal.tsx","App.tsx","index.tsx"],"names":["Content","styled","IconWrapper","IconPositionWrapper","CircleSVG","props","React","backgroundColor","children","offsetX","offsetY","toogleComponent","closeComponent","Portal","usePortal","initialStatus","useState","status","setStatus","modalStatus","closeModal","openModal","useModal","wrapperStatus","setWrapperStatus","left","top","positions","setPositions","useLockBodyScroll","useImperativeHandle","ref","menuStatus","closeMenu","setTimeout","openMenu","event","clientY","style","bgColor","App","onClick","ReactDOM","render","document","getElementById"],"mappings":"mwBAYO,IAAMA,EAAUC,IAAH,gWAOP,4BAA0B,EAA1B,KAGO,4BAA0B,OAA1B,UAGL,4BAA0B,OAA1B,sBAMFC,EAAcD,IAAH,qLASX,4BAA0B,KAA1B,KAGAE,EAAsBF,IAAH,aAAzB,8FAMMG,EAAYH,aACvB,gBAAuBI,E,oIAAvB,gCACEC,qCADF,MADuBL,CAAH,gJAKZ,gCAEK,4BACF,oCADE,c,EC9BiB,gBAC9B,c,IAEIM,oBACAC,a,IACAC,mBAAUA,EAAA,I,IACVC,mBAAUA,EAAA,IACVC,oBACAC,mBAIMC,EAAWC,MAAnB,OACA,ECrCa,SAACC,mBAAgB,GAChC,MAA4BC,mBAA5B,GAAOC,EAAP,KAAeC,EAAf,KAEA,MAAO,CACLC,YADK,EAELC,WAAY,kBAAMF,GAAN,IACZG,UAAW,kBAAMH,GAAN,KD+BoCI,EAA/C,GAAQH,EAAR,cAAqBC,EAArB,aAAiCC,EAAjC,YACA,EAA0CL,mBAA1C,GAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAkCR,mBAAS,CAAES,KAAF,EAAWC,IAAK,IAApDC,EAAP,KAAkBC,EAAlB,KAeA,OAbAC,eACAC,8BAAoBC,GAAK,iBAAO,CAC9BC,WAD8B,EAE9BC,UAAW,WACTC,YAAW,kBAAMV,GAAN,KAAXU,KACAd,KAEFe,SAAU,WACRX,MACAH,SAKF,kCACGV,GAAgB,YACfiB,EAAa,CAAEH,KAAMW,EAAR,QAAuBV,IAAKU,EAAMC,UAC/ChB,IACAG,QAJJ,GAME,yBACE,qBAAaP,OAAQM,GACnB,qBACEe,MAAO,CACLZ,IAAQC,MAAL,EADE,KAELF,KAASE,OAAL,SAGN,qBAAWY,QAAShC,EAAiBU,OAAQE,MAGjD,qBAASF,OAAQE,GACfb,6BADF,GAEGM,GAAe,WACdsB,YAAW,kBAAMV,GAAN,KAAXU,KACAd,aErDCoB,EAtBH,WACV,OACE,kBAAC,EAAD,CACEjC,gBAAgB,UAChBI,gBAAiB,SAAA8B,GAAO,OACtB,4BAAQA,QAASA,GAAjB,gDAIF7B,eAAgB,SAAA6B,GAAO,OACrB,4BAAQA,QAASA,GAAjB,kDAKF,wDCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.24cacdd9.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ReactComponent as Circle } from './circle.svg'\n\ninterface ModalStatus {\n  status: boolean\n}\n\ninterface ModalBgColor {\n  bgColor: string\n}\n\nexport const Content = styled.div<ModalStatus>`\n  box-sizing: border-box;\n  display: flex;\n  height: 100vh;\n  left: 0;\n  max-height: 100vh;\n  max-width: 100vw;\n  opacity: ${({ status }) => (status ? 1 : 0)};\n  overflow: auto;\n  padding: 50px 10px;\n  pointer-events: ${({ status }) => (status ? 'auto' : 'none')};\n  position: fixed;\n  top: 0;\n  transform: ${({ status }) => (status ? 'none' : 'translateY(20px)')};\n  transition: opacity 0.5s, transform 0.3s;\n  width: 100%;\n  z-index: 1000;\n`\n\nexport const IconWrapper = styled.div<ModalStatus>`\n  height: 100vh;\n  left: 0;\n  max-height: 100vh;\n  max-width: 100vw;\n  overflow: hidden;\n  position: fixed;\n  top: 0;\n  width: 100vw;\n  z-index: ${({ status }) => (status ? 999 : -1)};\n`\n\nexport const IconPositionWrapper = styled.div`\n  pointer-events: none;\n  position: absolute;\n  transform: translate(-50%, -50%);\n`\n\nexport const CircleSVG = styled(\n  ({ bgColor, status, ...props }: ModalStatus & ModalBgColor) => (\n    <Circle {...props} />\n  )\n)`\n  fill: ${({ bgColor }) => bgColor};\n  height: 60px;\n  transform: ${({ status }) =>\n    status ? 'scale(100) translate3d(1%, 1%, 0)' : 'scale(0)'};\n  transform-origin: center;\n  transition: transform 0.5s;\n  width: 60px;\n`\n","import React, { Fragment, useImperativeHandle, useState } from 'react'\nimport usePortal from 'react-useportal'\nimport { useLockBodyScroll } from 'react-use'\nimport useModal from './hooks/useModal'\nimport { CircleSVG, Content, IconWrapper, IconPositionWrapper } from './style'\n\ntype RefContent = {\n  menuStatus: boolean\n  closeMenu: () => void\n  openMenu: () => void\n}\n\ninterface Props {\n  backgroundColor: string\n  children: React.ReactNode\n  toogleComponent: (\n    onClick: (event: React.MouseEvent) => void,\n    status: boolean\n  ) => React.ReactNode\n  closeComponent: (\n    onClick: (event: React.MouseEvent) => void\n  ) => React.ReactNode\n  offsetX?: number\n  offsetY?: number\n}\n\nexport const ReactCircleModal = React.forwardRef<RefContent | null, Props>(\n  (\n    {\n      backgroundColor,\n      children,\n      offsetX = 0,\n      offsetY = 0,\n      toogleComponent,\n      closeComponent\n    },\n    ref\n  ) => {\n    const { Portal } = usePortal()\n    const { modalStatus, closeModal, openModal } = useModal(false)\n    const [wrapperStatus, setWrapperStatus] = useState(modalStatus)\n    const [positions, setPositions] = useState({ left: 0, top: 0 })\n\n    useLockBodyScroll(modalStatus)\n    useImperativeHandle(ref, () => ({\n      menuStatus: modalStatus,\n      closeMenu: () => {\n        setTimeout(() => setWrapperStatus(false), 500)\n        closeModal()\n      },\n      openMenu: () => {\n        setWrapperStatus(true)\n        openModal()\n      }\n    }))\n\n    return (\n      <Fragment>\n        {toogleComponent((event) => {\n          setPositions({ left: event.clientX, top: event.clientY })\n          openModal()\n          setWrapperStatus(true)\n        }, modalStatus)}\n        <Portal>\n          <IconWrapper status={wrapperStatus}>\n            <IconPositionWrapper\n              style={{\n                top: `${positions.top + offsetY}px`,\n                left: `${positions.left + offsetX}px`\n              }}\n            >\n              <CircleSVG bgColor={backgroundColor} status={modalStatus} />\n            </IconPositionWrapper>\n          </IconWrapper>\n          <Content status={modalStatus}>\n            <div>{children}</div>\n            {closeComponent(() => {\n              setTimeout(() => setWrapperStatus(false), 500)\n              closeModal()\n            })}\n          </Content>\n        </Portal>\n      </Fragment>\n    )\n  }\n)\n\nexport default ReactCircleModal\n","import { useState } from 'react'\n\nconst useModal = (initialStatus = false) => {\n  const [status, setStatus] = useState(initialStatus)\n\n  return {\n    modalStatus: status,\n    closeModal: () => setStatus(false),\n    openModal: () => setStatus(true)\n  }\n}\n\nexport default useModal\n","import React from 'react'\nimport ReactCircleModal from 'react-circle-modal'\n\nconst App = () => {\n  return (\n    <ReactCircleModal\n      backgroundColor=\"#ff0000\"\n      toogleComponent={onClick => (\n        <button onClick={onClick}>\n          Component that when clicked the modal opens\n        </button>\n      )}\n      closeComponent={onClick => (\n        <button onClick={onClick}>\n          Component that when clicked closes the modal\n        </button>\n      )}\n    >\n      <p>\n        Content inside of modal\n      </p>\n    </ReactCircleModal>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}